{"title":"流程管理器","inframe":false,"hidden":false,"roles":{"demo":1},"pageLink":"","children":[{"configs":{"itemId":"module"},"events":{"finalize":"app.init();","initialize":"Wb.apply(app, {\n  /**\n   * 加载相关类库文件并显示viewport。\n   */\n  init: function() {\n    function create() {\n      if (contextOwner)\n        contextOwner.add(app.viewport1);\n      else new Ext.container.Viewport(app.viewport1);\n      var config, panel = app.panel1;\n      panel.update('<textarea><\/textarea>');\n      config = {\n        lineNumbers: true,\n        theme: Wb.editTheme,\n        highlightSelectionMatches: {\n          showToken: /\\w/\n        },\n        mode: {\n          name: 'text/javascript',\n          globalVars: true\n        },\n        gutters: ['CodeMirror-lint-markers'],\n        lint: true,\n        matchBrackets: true,\n        extraKeys: {\n          'Ctrl-/': 'toggleComment',\n          'Ctrl-.': function(doc) {\n            if (doc.modifyCursor)\n              doc.setCursor(doc.modifyCursor);\n          },\n          'Shift-Ctrl-F': function(doc) {\n            if (doc.options.readOnly)\n              return;\n            var cursor = doc.getCursor(),\n              scroll = doc.getScrollInfo();\n            doc.autoFormatRange({\n              line: 0,\n              ch: 0\n            }, {\n              line: Number.MAX_VALUE,\n              ch: Number.MAX_VALUE\n            });\n            doc.scrollTo(scroll.left, scroll.top);\n            doc.setCursor(cursor);\n          }\n        }\n      };\n      config.extraKeys['Alt-/'] = 'autocomplete';\n      app.scriptEditor = CodeMirror.fromTextArea(panel.el.down('textarea', true), config);\n      app.scriptEditor.on('change', function() {\n        var at = app.tab1.getActiveTab();\n        if (at && at.recordModify) {\n          app.scriptEditor.selNode.edScript = app.scriptEditor.getValue();\n          app.setModified();\n        }\n      });\n      app.scriptEditor.on('cursorActivity', function() {\n        var o = app.scriptEditor.getCursor();\n        app.cursorLbl.setText((o.line + 1) + ':' + (o.ch + 1));\n      });\n      app.panel1.fireEvent('resize');\n      app.defDragSelector();\n      app.defineRaphaelActions();\n    }\n    if (window.CodeMirror && window.Raphael)\n      create();\n    else {\n      var libs = [];\n      //Wb会自动略去已经加载的库，此判断的目的在于在IDE中运行时避免重复载加载调试版本和发布版本CodeMirror\n      if (!window.Raphael)\n        libs.push('wb/libs/raphael/raphael.js');\n      if (!window.CodeMirror) {\n        libs.push('wb/libs/cm/cmirror.css');\n        libs.push('wb/libs/cm/cmirror.js');\n      }\n      Wb.addLink(libs, create);\n    }\n  },\n  defDragSelector: function() {\n    Ext.define('Wb.flow.DragSelector', {\n      init: function(panel) {\n        this.panel = panel;\n        panel.mon(panel, {\n          beforecontainerclick: this.cancelClick,\n          scope: this,\n          render: {\n            fn: this.onRender,\n            scope: this,\n            single: true\n          }\n        });\n      },\n      onRender: function() {\n        this.tracker = new Ext.dd.DragTracker({\n          panel: this.panel,\n          el: this.panel.body,\n          dragSelector: this,\n          onBeforeStart: this.onBeforeStart,\n          onStart: this.onStart,\n          onDrag: this.onDrag,\n          onEnd: this.onEnd\n        });\n        this.dragRegion = new Ext.util.Region();\n      },\n      onBeforeStart: function(e) {\n        return e.target == this.panel.paper.canvas;\n      },\n      onStart: function(e) {\n        var dragSelector = this.dragSelector;\n        this.dragging = true;\n        this.panel.dragging = true;\n        dragSelector.fillRegions();\n        dragSelector.getProxy().show();\n      },\n      cancelClick: function() {\n        return !this.tracker.dragging;\n      },\n      onDrag: function(e) {\n        var dragSelector = this.dragSelector,\n          dragRegion = dragSelector.dragRegion,\n          bodyRegion = dragSelector.bodyRegion,\n          proxy = dragSelector.getProxy(),\n          startXY = this.startXY,\n          currentXY = this.getXY(),\n          minX = Math.min(startXY[0], currentXY[0]),\n          minY = Math.min(startXY[1], currentXY[1]),\n          width = Math.abs(startXY[0] - currentXY[0]),\n          height = Math.abs(startXY[1] - currentXY[1]),\n          region, selected;\n\n        Ext.apply(dragRegion, {\n          top: minY,\n          left: minX,\n          right: minX + width,\n          bottom: minY + height\n        });\n        dragRegion.constrainTo(bodyRegion);\n        proxy.setRegion(dragRegion);\n        var i, j = 0,\n          so, b, s, r, nodeList = this.panel.nodeList,\n          ox = this.panel.body.getLeft(),\n          oy = this.panel.body.getTop();\n        for (i in nodeList) {\n          if (nodeList[i].isLine) {\n            r = nodeList[i].posInfo;\n            s = app.lineIntersect(r.x1 + ox, r.y1 + oy, r.x2 + ox, r.y2 + oy,\n              dragRegion.x, dragRegion.y, dragRegion.right, dragRegion.bottom);\n          } else {\n            r = {};\n            b = nodeList[i].getBBox(true);\n            r.x = b.x + ox;\n            r.y = b.y + oy;\n            r.right = r.x + b.width;\n            r.bottom = r.y + b.height;\n            s = dragRegion.intersect(r);\n          }\n          nodeList[i].selected = s;\n          if (s && !nodeList[i].isLine) {\n            so = nodeList[i];\n            j++;\n          }\n          if (nodeList[i].isLine)\n            nodeList[i].attr({\n              opacity: s ? 0.5 : 0.2\n            });\n          else nodeList[i].attr({\n            \"fill-opacity\": s ? 0.5 : 0.2\n          });\n          app.disableProperty(j != 1);\n          if (j == 1)\n            app.setProperty(so);\n        }\n      },\n      onEnd: Ext.Function.createDelayed(function(e) {\n        var dragSelector = this.dragSelector;\n        this.dragging = false;\n        this.panel.dragging = false;\n        dragSelector.getProxy().hide();\n      }, 1),\n      getProxy: function() {\n        if (!this.proxy) {\n          this.proxy = this.panel.body.createChild({\n            tag: 'div',\n            cls: 'x-view-selector'\n          });\n        }\n        return this.proxy;\n      },\n      fillRegions: function() {\n        var panel = this.panel;\n        this.bodyRegion = panel.body.getRegion();\n      }\n    });\n  },\n  disableProperty: function(b) {\n    var t = app.tab1.getActiveTab();\n    if (t) t.recordModify = !b;\n    if (b) {\n      if (t) {\n        t.propertyNode = null;\n        app.scriptEditor.selNode = null;\n      }\n      app.edTitle.setValue('(请选择1个节点)');\n      app.scriptEditor.setValue('');\n    }\n    app.panel1.setDisabled(b);\n  },\n  setProperty: function(node) {\n    if (app.scriptEditor.selNode == node) return;\n    var at = app.tab1.getActiveTab(),\n      pos, saveLeft, saveTop, saveCursor;\n    saveLeft = node.scrollLeft;\n    saveTop = node.scrollTop;\n    saveCursor = node.cursor;\n    if (app.scriptEditor.selNode) {\n      pos = app.scriptEditor.getScrollInfo();\n      app.scriptEditor.selNode.scrollLeft = pos.x;\n      app.scriptEditor.selNode.scrollTop = pos.y;\n      app.scriptEditor.selNode.cursor = app.scriptEditor.getCursor();\n    }\n    at.recordModify = false;\n    app.edTitle.clearInvalid();\n    app.edTitle.setValue(node.edTitle);\n    if (Ext.isIE)\n      app.scriptEditor.focus();\n    app.scriptEditor.setValue(node.edScript);\n    at.propertyNode = node;\n    at.recordModify = true;\n    app.scriptEditor.scrollTo(saveLeft || 0, saveTop || 0);\n    if (saveCursor) app.scriptEditor.setCursor(saveCursor);\n    app.scriptEditor.selNode = node;\n  },\n  defineRaphaelActions: function() {\n    Raphael.fn.link = function(obj) {\n      var point, path, adjx, adjy, posInfo;\n\n      point = app.getStartEnd(obj.obj1, obj.obj2);\n      adjx = Math.abs(point.end.x - point.start.x);\n      adjy = Math.abs(point.end.y - point.start.y);\n      if (adjx + adjy < 10)\n        point.end.x += (10 - adjx) * (point.end.x > point.start.x ? 1 : -1);\n      if (adjx + adjy < 10)\n        point.end.y += (10 - adjy) * (point.end.y > point.start.y ? 1 : -1);\n      path = 'M' + point.start.x + ' ' + point.start.y + 'L' + point.end.x + ' ' + point.end.y;\n      posInfo = {\n        x1: point.start.x,\n        y1: point.start.y,\n        x2: point.end.x,\n        y2: point.end.y\n      };\n      if (obj.linkPath) {\n        obj.linkPath.attr({\n          path: path\n        });\n        obj.linkPath.posInfo = posInfo;\n      } else {\n        obj.linkPath = this.path(path);\n        obj.linkPath.attr({\n          'arrow-end': 'classic-wide-midium',\n          cursor: \"hand\",\n          stroke: '#000',\n          opacity: 0.2,\n          'stroke-width': 4\n        });\n        obj.linkPath.posInfo = posInfo;\n        obj.linkPath.isLine = true;\n        obj.linkPath.src = obj.obj1;\n        obj.linkPath.dst = obj.obj2;\n        app.tab1.getActiveTab().nodeList.push(obj.linkPath);\n        obj.linkPath.mousedown(function(e) {\n          app.disableProperty(true);\n          if (e.shiftKey) {\n            this.selected = !this.selected;\n            this.attr({\n              opacity: this.selected ? 0.5 : 0.2\n            });\n          } else {\n            if (!this.selected)\n              app.clearSelection(this);\n          }\n          e.preventDefault();\n        });\n      }\n    };\n  },\n  lineIntersect: function(linePointX1, linePointY1, linePointX2, linePointY2,\n    rectangleLeftTopX, rectangleLeftTopY, rectangleRightBottomX,\n    rectangleRightBottomY) {\n    var lineHeight = linePointY1 - linePointY2,\n      lineWidth = linePointX2 - linePointX1,\n      c = linePointX1 * linePointY2 - linePointX2 * linePointY1,\n      temp;\n\n    if ((lineHeight * rectangleLeftTopX + lineWidth * rectangleLeftTopY + c >= 0 && lineHeight * rectangleRightBottomX + lineWidth * rectangleRightBottomY + c <= 0) || (lineHeight * rectangleLeftTopX + lineWidth * rectangleLeftTopY + c <= 0 && lineHeight * rectangleRightBottomX + lineWidth * rectangleRightBottomY + c >= 0) || (lineHeight * rectangleLeftTopX + lineWidth * rectangleRightBottomY + c >= 0 && lineHeight * rectangleRightBottomX + lineWidth * rectangleLeftTopY + c <= 0) || (lineHeight * rectangleLeftTopX + lineWidth * rectangleRightBottomY + c <= 0 && lineHeight * rectangleRightBottomX + lineWidth * rectangleLeftTopY + c >= 0)) {\n      if (rectangleLeftTopX > rectangleRightBottomX) {\n        temp = rectangleLeftTopX;\n        rectangleLeftTopX = rectangleRightBottomX;\n        rectangleRightBottomX = temp;\n      }\n      if (rectangleLeftTopY < rectangleRightBottomY) {\n        temp = rectangleLeftTopY;\n        rectangleLeftTopY = rectangleRightBottomY;\n        rectangleRightBottomY = temp;\n      }\n      if ((linePointX1 < rectangleLeftTopX && linePointX2 < rectangleLeftTopX) || (linePointX1 > rectangleRightBottomX && linePointX2 > rectangleRightBottomX) || (linePointY1 > rectangleLeftTopY && linePointY2 > rectangleLeftTopY) || (linePointY1 < rectangleRightBottomY && linePointY2 < rectangleRightBottomY))\n        return false;\n      else\n        return true;\n    } else\n      return false;\n  },\n  getStartEnd: function(obj1, obj2) {\n    var bb1 = obj1.getBBox(),\n      bb2 = obj2.getBBox();\n    var p = [{\n      x: bb1.x + bb1.width / 2,\n      y: bb1.y - 1\n    }, {\n      x: bb1.x + bb1.width / 2,\n      y: bb1.y + bb1.height + 1\n    }, {\n      x: bb1.x - 1,\n      y: bb1.y + bb1.height / 2\n    }, {\n      x: bb1.x + bb1.width + 1,\n      y: bb1.y + bb1.height / 2\n    }, {\n      x: bb2.x + bb2.width / 2,\n      y: bb2.y - 1\n    }, {\n      x: bb2.x + bb2.width / 2,\n      y: bb2.y + bb2.height + 1\n    }, {\n      x: bb2.x - 1,\n      y: bb2.y + bb2.height / 2\n    }, {\n      x: bb2.x + bb2.width + 1,\n      y: bb2.y + bb2.height / 2\n    }];\n    var d = {},\n      dis = [],\n      res, result = {};\n    for (var i = 0; i < 4; i++) {\n      for (var j = 4; j < 8; j++) {\n        var dx = Math.abs(p[i].x - p[j].x),\n          dy = Math.abs(p[i].y - p[j].y);\n        if (\n          (i == j - 4) ||\n          (((i != 3 && j != 6) || p[i].x < p[j].x) &&\n            ((i != 2 && j != 7) || p[i].x > p[j].x) &&\n            ((i !== 0 && j != 5) || p[i].y > p[j].y) &&\n            ((i != 1 && j != 4) || p[i].y < p[j].y))\n        ) {\n          dis.push(dx + dy);\n          d[dis[dis.length - 1]] = [i, j];\n        }\n      }\n    }\n    if (dis.length === 0) {\n      res = [0, 4];\n    } else {\n      res = d[Math.min.apply(Math, dis)];\n    }\n    result.start = {};\n    result.end = {};\n    result.start.x = p[res[0]].x;\n    result.start.y = p[res[0]].y;\n    result.end.x = p[res[1]].x;\n    result.end.y = p[res[1]].y;\n    return result;\n  },\n  dragger: function(x, y, e) {\n    if (Ext.isIE) {\n      if (this.stopClick)\n        return;\n      else this.stopClick = true;\n    }\n    var i, j = 0,\n      k, firstNode, o, firstObj, at = app.tab1.getActiveTab(),\n      nodeList = at.nodeList,\n      connections = at.connections;\n    for (i in nodeList) {\n      o = nodeList[i];\n      if (o.selected && o != this && !o.isLine) {\n        j++;\n        firstObj = o;\n      }\n    }\n    if (e.shiftKey) {\n      this.selected = !this.selected;\n      this.attr({\n        \"fill-opacity\": this.selected ? 0.5 : 0.2\n      });\n    } else {\n      if (!this.selected)\n        app.clearSelection(this);\n    }\n    k = 0;\n    for (i in nodeList) {\n      o = nodeList[i];\n      if (o.selected && !o.isLine) {\n        k++;\n        firstNode = o;\n        o.ox = o.attr(\"x\");\n        o.oy = o.attr(\"y\");\n      }\n    }\n    app.disableProperty(k != 1);\n    if (k == 1)\n      app.setProperty(firstNode);\n    if (app.linkBtn.pressed) {\n      app.linkBtn.toggle(false);\n      if (j != 1)\n        Wb.warning('请选择1个源节点。');\n      else {\n        for (i in connections) {\n          if (connections[i].obj1 == firstObj && connections[i].obj2 == this)\n            return;\n        }\n        o = {\n          obj1: firstObj,\n          obj2: this\n        };\n        connections.push(o);\n        this.paper.link(o);\n        app.setModified();\n      }\n    }\n  },\n  getSnap: function(p) {\n    var m = p % 8;\n    p = p - m;\n    if (m > 4)\n      return p + 8;\n    return p;\n  },\n  move: function(dx, dy) {\n    var i, o, lbl, x, mv = 0,\n      y, w, at = app.tab1.getActiveTab(),\n      nodeList = at.nodeList,\n      connections = at.connections;\n\n    for (i in nodeList) {\n      o = nodeList[i];\n      if (o.selected && !o.isLine) {\n        x = app.getSnap(o.ox + dx);\n        y = app.getSnap(o.oy + dy);\n        if (o.attr('x') != x || o.attr('y') != y)\n          mv = 1;\n        o.attr({\n          x: x,\n          y: y\n        });\n        lbl = o.label;\n        w = Math.max(o.label.getBBox().width + 6, 150);\n        if (lbl) lbl.attr({\n          x: Math.round(o.getBBox().x + w / 2),\n          y: y + 11\n        });\n      }\n    }\n    if (mv) app.setModified();\n    for (i in connections)\n      this.paper.link(connections[i]);\n    this.paper.safari();\n  },\n  getUnique: function(ns, at) {\n    var i, o, n, b;\n    while (true) {\n      n = '节点' + at.nodeIndex++;\n      b = true;\n      for (i in ns) {\n        o = ns[i];\n        if (!o.isLine && o.edTitle == n) {\n          b = false;\n          break;\n        }\n      }\n      if (b) return n;\n    }\n  },\n  draw: function(p, x, y, w, tt, script) {\n    var t, o, r, at = app.tab1.getActiveTab(),\n      flag = !tt;\n\n    if (tt === undefined) tt = app.getUnique(at.nodeList, at);\n    if (w === undefined) w = 150;\n    if (script === undefined) script = '';\n    p.setStart();\n    t = p.text(x + Math.round(w / 2), y + 11, tt);\n    t.attr({\n      'font-size': 12,\n      color: '#000'\n    });\n    o = p.rect(x, y, w, 23, 5);\n    o.edTitle = tt;\n    o.edScript = script;\n    o.attr({\n      fill: '#888',\n      stroke: '#AAC',\n      \"stroke-width\": 1,\n      \"fill-opacity\": flag ? 0.5 : 0.2,\n      cursor: \"move\"\n    });\n    o.label = t;\n    r = p.setFinish();\n    o.obj = r;\n    o.paper = p;\n    if (Ext.isIE) {\n      r.mouseup(function() {\n        this.stopClick = false;\n        app.scriptEditor.focus();\n      });\n    }\n    r.drag(app.move, app.dragger);\n    at.nodeList.push(o);\n    if (flag) {\n      app.clearSelection(o);\n      app.setModified();\n    }\n    return o;\n  },\n  clearSelection: function(o) {\n    var i, b, nodeList = app.tab1.getActiveTab().nodeList;\n    for (i in nodeList) {\n      b = nodeList[i] == o;\n      nodeList[i].selected = b;\n      if (nodeList[i].isLine)\n        nodeList[i].attr({\n          opacity: b ? 0.5 : 0.2\n        });\n      else nodeList[i].attr({\n        \"fill-opacity\": b ? 0.5 : 0.2\n      });\n    }\n  },\n  selectAll: function() {\n    var at = app.tab1.getActiveTab(),\n      i, nodeList, l;\n\n    if (!at) return;\n    nodeList = at.nodeList;\n    l = nodeList.length;\n    for (i in nodeList) {\n      nodeList[i].selected = true;\n      if (nodeList[i].isLine)\n        nodeList[i].attr({\n          opacity: 0.5\n        });\n      else nodeList[i].attr({\n        \"fill-opacity\": 0.5\n      });\n    }\n    app.disableProperty(l != 1);\n    if (l == 1)\n      app.setProperty(nodeList[0]);\n  },\n  removeNode: function() {\n    var i, x = 0,\n      j, k, l, o, c, n, at = app.tab1.getActiveTab();\n\n    if (!at) return;\n    c = at.connections, n = at.nodeList;\n    k = c.length;\n    for (i = k - 1; i >= 0; i--) {\n      o = c[i];\n      if (o.linkPath.selected || o.obj1.selected || o.obj2.selected) {\n        o.linkPath.selected = true;\n        c.splice(i, 1);\n      }\n    }\n    l = n.length;\n    for (j = l - 1; j >= 0; j--) {\n      o = n[j];\n      if (!o.selected) continue;\n      if (o.label)\n        o.label.remove();\n      x = 1;\n      o.remove();\n      n.splice(j, 1);\n    }\n    if (x) {\n      app.disableProperty(true);\n      app.setModified();\n    }\n  },\n  setSaveBtn: function() {\n    if (!app.saveBtn)\n      return;\n    var b1 = true,\n      b2 = true,\n      at = app.tab1.getActiveTab();\n    app.tab1.items.each(function(c) {\n      if (c.isModified) {\n        b2 = false;\n        if (c == at) {\n          b1 = false;\n          return false;\n        }\n      }\n    });\n    app.saveBtn.setDisabled(b1);\n    app.saveAllBtn.setDisabled(b2);\n  },\n  setModified: function() {\n    Wb.setModified(app.tab1.getActiveTab());\n    app.setSaveBtn();\n  },\n  createFlow: function(obj) {\n    var t;\n    t = app.tab1.add({\n      title: obj.name,\n      flowName: obj.name,\n      remark: obj.remark,\n      iconCls: 'item_icon',\n      closable: true,\n      workFlowId: obj.id,\n      plugins: [new Wb.flow.DragSelector()],\n      autoScroll: true,\n      listeners: {\n        beforedestroy: function(t) {\n          app.disableProperty(!app.tab1.getActiveTab());\n          app.setSaveBtn();\n        },\n        beforeclose: function(t) {\n          if (t.isModified) {\n            app.tab1.setActiveTab(t);\n            Wb.choose('\"' + t.flowName + '\" 已经被修改，保存所做的更改吗？', function(b) {\n              if (b == 'yes') {\n                app.save(false, function() {\n                  t.close();\n                });\n              } else if (b == 'no') {\n                t.isModified = false;\n                t.close();\n              }\n            });\n            return false;\n          }\n        },\n        afterrender: function(p) {\n          var b = p.body;\n          p.paper = Raphael(b.dom.id, 4000, 3500);\n          b.on('click', function(e) {\n            if (!p.dragging && e.target == p.paper.canvas) {\n              if (app.nodeBtn.pressed) {\n                var o = app.draw(p.paper, app.getSnap(e.getX() - b.getLeft() + p.body.dom.scrollLeft),\n                  app.getSnap(e.getY() - b.getTop() + p.body.dom.scrollTop));\n                app.nodeBtn.toggle(false);\n                app.disableProperty(false);\n                app.setProperty(o);\n              } else {\n                app.clearSelection();\n                app.disableProperty(true);\n              }\n            }\n          });\n        }\n      }\n    });\n    app.tab1.setActiveTab(t);\n    t.nodeIndex = 1;\n    t.nodeList = [];\n    t.connections = [];\n    if (obj.list)\n      app.openFlow(obj, t);\n    app.disableProperty(true);\n  },\n  openFlow: function(obj, t) {\n    var i, o, b;\n    o = obj.list;\n    for (i in o) {\n      b = o[i].box;\n      if (o[i].isObj) app.draw(t.paper, b.x, b.y, b.w, o[i].label, o[i].script);\n    }\n\n    function get(n) {\n      var j, nl = t.nodeList;\n\n      for (j in nl)\n        if (nl[j].edTitle == n)\n          return nl[j];\n      return null;\n    }\n\n    o = obj.conn;\n    for (i in o) {\n      b = {\n        obj1: get(o[i].src),\n        obj2: get(o[i].dst)\n      };\n      t.connections.push(b);\n      t.paper.link(b);\n    }\n  },\n  addFlow: function() {\n    Wb.prompt({\n      title: '添加流程',\n      iconCls: 'record_add_icon',\n      items: [{\n        fieldLabel: '流程名称',\n        itemId: 'FLOW_NAME',\n        allowBlank: false\n      }, {\n        fieldLabel: '备注',\n        itemId: 'REMARK'\n      }],\n      handler: function(values, win) {\n        Wb.request({\n          url: 'm?xwl=admin/workflow/insert',\n          params: values,\n          success: function(r) {\n            var data = Wb.decode(r.responseText);\n            data.leaf = true;\n            Wb.append(data, app.tree.getRootNode());\n            app.createFlow({\n              id: data.FLOW_ID,\n              name: values.FLOW_NAME,\n              remark: values.REMARK\n            });\n            win.close();\n          }\n        });\n      }\n    });\n  },\n  getTab: function(id) {\n    return app.tab1.down('[workFlowId=' + id + ']');\n  },\n  save: function(isAll, fn) {\n    var data = {},\n      o, l, at = app.tab1.getActiveTab(),\n      nl, conn, box;\n    app.tab1.items.each(function(t) {\n      if (t.isModified && (isAll || t == at)) {\n        l = t.nodeList;\n        nl = [];\n        for (var i in l) {\n          o = l[i];\n          box = o.getBBox();\n          if (o.isLine) nl.push({\n            isObj: false,\n            box: {\n              x: box.x,\n              y: box.y,\n              w: box.width\n            }\n          });\n          else nl.push({\n            label: o.edTitle,\n            isObj: true,\n            script: o.edScript,\n            box: {\n              x: box.x,\n              y: box.y,\n              w: box.width\n            }\n          });\n        }\n        l = t.connections;\n        conn = [];\n        for (var j in l) {\n          o = l[j];\n          conn.push({\n            src: o.obj1.edTitle,\n            dst: o.obj2.edTitle\n          });\n        }\n        data[t.workFlowId] = {\n          name: t.flowName,\n          remark: t.remark,\n          list: nl,\n          conn: conn\n        };\n      }\n    });\n    Wb.request({\n      url: 'm?xwl=admin/workflow/save',\n      message: '正在保存中...',\n      jsonData: data,\n      success: function() {\n        app.tab1.items.each(function(t) {\n          if (t.isModified && (isAll || t == at))\n            Wb.unModified(t);\n        });\n        app.setSaveBtn();\n        if (fn) fn();\n      }\n    });\n  }\n});","beforeunload":"if (!app.saveAllBtn.disabled)\n  return '还有未保存的流程';"},"children":[{"configs":{"layout":"border","itemId":"viewport1","createInstance":"false"},"events":{"afterrender":"app.navKey = new Ext.KeyNav({\n  viewport: app.viewport1,\n  E: {\n    ctrl: true,\n    fn: function() {\n      app.newBtn.fireEvent('click');\n    }\n  },\n  S: {\n    ctrl: true,\n    fn: function(e) {\n      app.save(e.shiftKey);\n    }\n  }\n});"},"children":[{"configs":{"region":"north","weight":"90","enableOverflow":"true","itemId":"toolbar1"},"children":[{"configs":{"text":"添加流程","itemId":"newBtn","iconCls":"record_add_icon","tooltip":"添加新的流程 (Ctrl+E)"},"events":{"click":"app.addFlow();"},"children":[],"type":"item","expanded":true},{"configs":{"text":"删除流程","itemId":"delBtn","iconCls":"record_delete_icon","tooltip":"删除选择的流程"},"events":{"click":"var id, t, n = app.tree.getSelection()[0];\nif (n) {\n  Wb.confirm('确定需要删除\"' + n.get('text') + '\"吗？', function() {\n    id = n.data.FLOW_ID;\n    Wb.request({\n      url: 'm?xwl=admin/workflow/delete',\n      params: {\n        id: id\n      },\n      success: function() {\n        Wb.remove(app.tree);\n        t = app.getTab(id);\n        if (t) {\n          t.isModified = false;\n          t.close();\n        }\n      }\n    });\n  });\n} else Wb.warn('请选择一个需要删除的流程。');"},"children":[],"type":"item","expanded":false},{"configs":{"text":"流程属性","itemId":"propertyBtn","iconCls":"property_icon","tooltip":"查看和修改流程的属性"},"events":{"click":"var id, t, n = app.tree.getSelection()[0];\nif (n) {\n  id = n.get('FLOW_ID');\n  Wb.prompt({\n    iconCls: 'property_icon',\n    title: '属性 - ' + n.get('text'),\n    items: [{\n      fieldLabel: '流程编号',\n      value: id,\n      readOnly: true\n    }, {\n      fieldLabel: '流程名称',\n      allowBlank: false,\n      itemId: 'flowName',\n      value: n.get('text')\n    }, {\n      fieldLabel: '备注',\n      itemId: 'remark',\n      value: n.get('REMARK')\n    }, {\n      fieldLabel: '修改日期',\n      value: Wb.dateToText(n.get('MODIFY_DATE')),\n      readOnly: true\n    }],\n    handler: function(values, win) {\n      Wb.request({\n        url: 'm?xwl=admin/workflow/update',\n        params: {\n          id: id,\n          name: values.flowName,\n          remark: values.remark\n        },\n        success: function(r) {\n          t = app.getTab(id);\n          if (t) {\n            t.remark = values.remark;\n            t.flowName = values.flowName;\n            t.setTitle((t.isModified ? '*' : '') + values.flowName);\n          }\n          Wb.update(n, Wb.decode(r.responseText));\n          win.close();\n        }\n      });\n    }\n  });\n} else Wb.warn('请选择一个流程。');"},"children":[],"type":"item","expanded":false},{"configs":{"text":"-","itemId":"item1"},"children":[],"type":"item","expanded":false},{"configs":{"text":"保存当前","itemId":"saveBtn","iconCls":"save_icon","disabled":"true","tooltip":"保存当前修改的流程 (Ctrl+S)"},"events":{"click":"app.save();"},"children":[],"type":"item","expanded":false},{"configs":{"text":"保存全部","itemId":"saveAllBtn","iconCls":"save_all_icon","disabled":"true","tooltip":"保存全部修改的流程 (Ctrl+Shift+S)"},"events":{"click":"app.save(true);"},"children":[],"type":"item","expanded":false},{"configs":{"text":"-","itemId":"item2"},"children":[],"type":"item","expanded":false},{"configs":{"text":"添加节点","enableToggle":"true","toggleGroup":"flow","itemId":"nodeBtn","iconCls":"insert_icon","tooltip":"添加流程节点"},"children":[],"type":"item","expanded":false},{"configs":{"text":"连接节点","enableToggle":"true","toggleGroup":"flow","itemId":"linkBtn","iconCls":"link_icon","tooltip":"把源节点连接到目标节点"},"children":[],"type":"item","expanded":false},{"configs":{"text":"-","itemId":"item21"},"children":[],"type":"item","expanded":false},{"configs":{"text":"移除节点","itemId":"removeBtn","iconCls":"remove_icon","tooltip":"移除选择的节点或连接"},"events":{"click":"app.removeNode();"},"children":[],"type":"item","expanded":false},{"configs":{"text":"选择全部","itemId":"selAllBtn","iconCls":"select_all_icon","tooltip":"选择全部节点和连接"},"events":{"click":"app.selectAll();"},"children":[],"type":"item","expanded":false}],"type":"toolbar","expanded":true},{"configs":{"region":"west","rootVisible":"false","title":"流程列表","weight":"80","collapsible":"true","width":"180","split":"true","itemId":"tree","iconCls":"list_icon"},"events":{"itemdblclick":"var id = record.data.FLOW_ID,\n  card = app.getTab(id);\nif (card)\n  app.tab1.setActiveTab(card);\nelse {\n  Wb.request({\n    url: 'm?xwl=admin/workflow/get-flow',\n    params: {\n      FLOW_ID: id\n    },\n    success: function(resp) {\n      var respObj = Wb.decode(resp.responseText),\n        data = Wb.decode(respObj.FLOW_CONTENT) || {};\n      data.id = respObj.FLOW_ID;\n      data.name = respObj.FLOW_NAME;\n      data.remark = respObj.REMARK;\n      app.createFlow(data);\n    }\n  });\n}"},"children":[{"configs":{"itemId":"store","url":"m?xwl=admin/workflow/select"},"children":[],"type":"treestore","expanded":false},{"configs":{"itemId":"tools"},"children":[{"configs":{"tooltype":"refresh","itemId":"item1","tooltip":"刷新"},"events":{"click":"Wb.reload(app.tree, 'workFlowId');"},"children":[],"type":"item","expanded":false}],"type":"array","expanded":true}],"type":"tree","expanded":true},{"configs":{"region":"center","bodyStyle":"background:#787878","plugins":"'tabreorderer'","itemId":"tab1"},"events":{"tabchange":"app.setSaveBtn();\nvar n = newCard.propertyNode;\nif (n) app.setProperty(n);\nelse app.disableProperty(true);"},"children":[],"type":"tab","expanded":false},{"configs":{"region":"south","height":"180","split":"true","itemId":"panel1"},"events":{"resize":"var me = this;\nif (app.scriptEditor && !me.destroying) {\n  Ext.fly(app.scriptEditor.getScrollerElement()).setHeight(me.getHeight() - me.down('toolbar').getHeight());\n  app.scriptEditor.refresh();\n}"},"children":[{"configs":{"isConfig":"true","itemId":"tbar"},"children":[{"configs":{"text":"名称：","xtype":"tbtext","itemId":"nameLbl"},"children":[],"type":"item","expanded":false},{"configs":{"allowBlank":"false","validator":"var n = app.scriptEditor.selNode,\n  s, ls, at = app.tab1.getActiveTab();\nif (n && at && at.recordModify) {\n  ls = at.nodeList;\n  for (s in ls) {\n    if (ls[s] != n && ls[s].edTitle === value)\n      return '节点名称重复';\n  }\n}\nreturn true;","value":"(请选择1个节点)","itemId":"edTitle","flex":"1"},"events":{"change":"var at = app.tab1.getActiveTab(),\n  n, w;\nif (at && at.recordModify && text.isValid()) {\n  n = app.scriptEditor.selNode;\n  n.edTitle = newValue;\n  n.label.attr({\n    text: newValue\n  });\n  w = Math.max(n.label.getBBox().width + 6, 150);\n  n.attr({\n    width: w\n  });\n  n.label.attr({\n    x: Math.round(n.getBBox().x + w / 2)\n  });\n  app.setModified();\n}"},"children":[],"type":"text","expanded":false},{"configs":{"text":"-","itemId":"item1"},"children":[],"type":"item","expanded":false},{"configs":{"text":"function (route)","xtype":"tbtext","itemId":"funcLbl"},"children":[],"type":"item","expanded":false},{"configs":{"text":"-","itemId":"item2"},"children":[],"type":"item","expanded":false},{"configs":{"text":"1:1","xtype":"tbtext","width":"80","itemId":"cursorLbl"},"children":[],"type":"item","expanded":false}],"type":"toolbar","expanded":true}],"type":"panel","expanded":true}],"type":"viewport","expanded":true}],"type":"module","expanded":true}],"iconCls":"start_icon"}